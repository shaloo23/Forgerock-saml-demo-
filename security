@Configuration
public class WebSecurityConfig extends WebSecurityConfigurerAdapter{
    @Override
    protected void configure(HttpSecurity http) throws Exception {
    }
}

@Bean
public SAMLEntryPoint samlEntryPoint() {
    SAMLEntryPoint samlEntryPoint = new SAMLEntryPoint();
    samlEntryPoint.setDefaultProfileOptions(defaultWebSSOProfileOptions());
    return samlEntryPoint;
}
 
 
@Bean
public WebSSOProfileOptions defaultWebSSOProfileOptions() {
    WebSSOProfileOptions webSSOProfileOptions = new WebSSOProfileOptions();
    webSSOProfileOptions.setIncludeScoping(false);
    return webSSOProfileOptions;
}

@Bean
public FilterChainProxy samlFilter() throws Exception {
    List<SecurityFilterChain> chains = new ArrayList<>();
    return new FilterChainProxy(chains);
}

@Bean
public SimpleUrlAuthenticationFailureHandler authenticationFailureHandler() {
    return new SimpleUrlAuthenticationFailureHandler();
}
 
@Bean
public SavedRequestAwareAuthenticationSuccessHandler            successRedirectHandler() {
    SavedRequestAwareAuthenticationSuccessHandler successRedirectHandler =
        new SavedRequestAwareAuthenticationSuccessHandler();
    successRedirectHandler.setDefaultTargetUrl("/");
    return successRedirectHandler;
}
 
@Bean
public SAMLProcessingFilter samlWebSSOProcessingFilter() throws Exception {
    SAMLProcessingFilter samlWebSSOProcessingFilter = new SAMLProcessingFilter();
    samlWebSSOProcessingFilter.setAuthenticationManager(authenticationManager());
    samlWebSSOProcessingFilter.setAuthenticationSuccessHandler(successRedirectHandler());
    samlWebSSOProcessingFilter.setAuthenticationFailureHandler(authenticationFailureHandler());
    return samlWebSSOProcessingFilter;
}

@Bean
public FilterChainProxy samlFilter() throws Exception {
     List<SecurityFilterChain> chains = new ArrayList<>();
     chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher("/saml/login/**"), samlEntryPoint()));
     chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher("/saml/SSO/**"),  samlWebSSOProcessingFilter()));
     return new FilterChainProxy(chains);
}

@Bean
public SimpleUrlLogoutSuccessHandler successLogoutHandler() {
    SimpleUrlLogoutSuccessHandler simpleUrlLogoutSuccessHandler = new SimpleUrlLogoutSuccessHandler(); 
    simpleUrlLogoutSuccessHandler.setDefaultTargetUrl(“/”); 
    simpleUrlLogoutSuccessHandler.setAlwaysUseDefaultTargetUrl(true);
    return  simpleUrlLogoutSuccessHandler;
}
  
@Bean
public SecurityContextLogoutHandler logoutHandler() {
    SecurityContextLogoutHandler logoutHandler =new SecurityContextLogoutHandler();
    logoutHandler.setInvalidateHttpSession(true);
    logoutHandler.setClearAuthentication(true);
    return logoutHandler;
}
  
@Bean
public SAMLLogoutFilter samlLogoutFilter() {
    return new SAMLLogoutFilter(successLogoutHandler(),
        new LogoutHandler[] { logoutHandler() },
        new LogoutHandler[] { logoutHandler() });
}
  
@Bean
public SAMLLogoutProcessingFilter samlLogoutProcessingFilter() {
    return new SAMLLogoutProcessingFilter(successLogoutHandler(),logoutHandler());
}

@Bean
public FilterChainProxy samlFilter() throws Exception {
    List<SecurityFilterChain> chains = new ArrayList<>();
    chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher("/saml/login/**"), samlEntryPoint()));
    chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher("/saml/SSO/**"), samlWebSSOProcessingFilter()));
    chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher("/saml/logout/**"), samlLogoutFilter()));
    chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher("/saml/SingleLogout/**"), samlLogoutProcessingFilter()));
    return new FilterChainProxy(chains);
}

@Bean
public MetadataDisplayFilter metadataDisplayFilter() {
    return new MetadataDisplayFilter();
}
 
@Bean
public FilterChainProxy samlFilter() throws Exception {
    List<SecurityFilterChain> chains = new ArrayList<>();
    chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher("/saml/metadata/**"), metadataDisplayFilter()));
    return new FilterChainProxy(chains);
}

@Bean
public MetadataGeneratorFilter metadataGeneratorFilter() {
    return new MetadataGeneratorFilter(metadataGenerator());
}  
 
@Bean
public MetadataGenerator metadataGenerator() {
    MetadataGenerator metadataGenerator = new MetadataGenerator();
    metadataGenerator.setEntityId(APP_ENTITY_ID);
    metadataGenerator.setEntityBaseURL(APP_BASE_URL);
    metadataGenerator.setExtendedMetadata(extendedMetadata());
    metadataGenerator.setIncludeDiscoveryExtension(false);
    metadataGenerator.setKeyManager(keyManager());
    return metadataGenerator;
}
     
@Bean
public ExtendedMetadata extendedMetadata() {
    ExtendedMetadata extendedMetadata = new ExtendedMetadata();
    extendedMetadata.setIdpDiscoveryEnabled(true);
    extendedMetadata.setSigningAlgorithm("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256");
    extendedMetadata.setSignMetadata(true);
    extendedMetadata.setEcpEnabled(true);
    return extendedMetadata;
}

@Override 
protected void configure(HttpSecurity http) throws Exception {
    http
        .httpBasic()
            .authenticationEntryPoint(samlEntryPoint());
    http
        .addFilterBefore(metadataGeneratorFilter(), ChannelProcessingFilter.class)
        .addFilterAfter(samlFilter(), BasicAuthenticationFilter.class)
        .addFilterBefore(samlFilter(), CsrfFilter.class);
    http       
        .authorizeRequests()
        .antMatchers("/").permitAll()
        .antMatchers("/saml/**").permitAll()
        .antMatchers("/css/**").permitAll()
        .antMatchers("/img/**").permitAll()
        .antMatchers("/js/**").permitAll()
        .anyRequest().authenticated();
 
   http
        .logout()
        .logoutSuccessUrl("/");
}

KeyManager
Metadata generation requires a keyManager.

metadataGenerator.setKeyManager(keyManager());
keyManager is responsible to encrypt the saml assertion sent to IdP.

A self-signed key and keystore can be generated with the JRE keytool command:

keytool -genkeypair -alias mykeyalias -keypass mykeypass -storepass samlstorepass -keystore saml-keystore.jks
The Corresponding bean is 

@Bean
public KeyManager keyManager() {
    ClassPathResource storeFile = new ClassPathResource("/saml-keystore.jks");
    String storePass = "samlstorepass";
    Map<String, String> passwords = new HashMap<>();
    passwords.put("mykeyalias", "mykeypass");
    return new JKSKeyManager(storeFile, storePass, passwords, "mykeyalias");
}


IdP metadata
The IDP metadata provides the means of contacting it through metadata.

It can either be downloaded from the IDP  , or if we provide the resource URL from where the metadata can be downloaded, the Spring SAML configuration does it for us.

@Bean
public ExtendedMetadataDelegate idpMetadata()
        throws MetadataProviderException, ResourceException {
 
    Timer backgroundTaskTimer = new Timer(true);
 
    HTTPMetadataProvider httpMetadataProvider = new HTTPMetadataProvider(backgroundTaskTimer, new HttpClient(),IDP_METADATA_URL.concat(getAppId()));               
 
 
    httpMetadataProvider.setParserPool(parserPool());
 
    ExtendedMetadataDelegate extendedMetadataDelegate =
            new ExtendedMetadataDelegate(httpMetadataProvider , extendedMetadata());
    extendedMetadataDelegate.setMetadataTrustCheck(true);
    extendedMetadataDelegate.setMetadataRequireSignature(false);
    return extendedMetadataDelegate;
}
 
@Bean
@Qualifier("metadata")
public CachingMetadataManager metadata() throws MetadataProviderException, ResourceException {
    List<MetadataProvider> providers = new ArrayList<>();
    providers.add(idpMetadata());
    return new CachingMetadataManager(providers);
}
Instead of httpMetaDataProvider we can also use FileSystemMetaDataProvider to fetch the metadata which is stored inside our application /resources/saml folder.



public ExtendedMetadataDelegate idpMetadata()
        throws MetadataProviderException, ResourceException {
 
    Timer backgroundTaskTimer = new Timer(true);
 
   ClassLoader classLoader = getClass().getClassLoader();
   URL resource = classLoader.getResource("saml/metadata.xml");
   if (resource == null) {
      throw new IllegalArgumentException("file not found!" );
  }
 File file=new File(resource.toURI());
 FilesystemMetadataProvider filesystemMetadataProvider = new FilesystemMetadataProvider(file);
 filesystemMetadataProvider.setRequireValidMetadata(true); // Enable validation
 filesystemMetadataProvider.setParserPool(parserPool());
 
    ExtendedMetadataDelegate extendedMetadataDelegate =
            new ExtendedMetadataDelegate(filesystemMetadataProvider, extendedMetadata());
    extendedMetadataDelegate.setMetadataTrustCheck(true);
    extendedMetadataDelegate.setMetadataRequireSignature(false);
    return extendedMetadataDelegate;
}
XML parsing
SAML being XML based protocol, XML parser pools should be initialized to read metadata and assertions that are in XML format.

@Bean
public VelocityEngine velocityEngine() {
    return VelocityFactory.getEngine();
}
 
@Bean(initMethod = "initialize")
public StaticBasicParserPool parserPool() {
    return new StaticBasicParserPool();
}
 
@Bean(name = "parserPoolHolder")
public ParserPoolHolder parserPoolHolder() {
    return new ParserPoolHolder();
}
SAML Binding configuration
SAML Binding that we use depends on the IDP specifications. We use POST and Redirect bindings with respect to our configuration in Onelogin and initialize SAMLProcessorImpl accordingly.

@Bean
public HTTPPostBinding httpPostBinding() {
    return new HTTPPostBinding(parserPool(), velocityEngine());
}
 
@Bean
public HTTPRedirectDeflateBinding httpRedirectDeflateBinding() {
    return new HTTPRedirectDeflateBinding(parserPool());
}
 
@Bean
public SAMLProcessorImpl processor() {
    Collection<SAMLBinding> bindings = new ArrayList<>();
    bindings.add(httpRedirectDeflateBinding());
    bindings.add(httpPostBinding());
    return new SAMLProcessorImpl(bindings);
}
Context provider
SAMLContextProviderImpl is responsible for parsing HttpRequest/Response and determining which local entity (IDP/SP) is responsible for its handling.

This configuration is for the application that is not behind a Reverse Proxy.

@Bean
  public SAMLContextProviderImpl contextProvider() {
      return new SAMLContextProviderImpl();
  }
Alternatively, SAMLContextProviderLB can be used, which is a Context provider that overrides request attributes with values of the load-balancer or reverse-proxy in front of the local application. The settings help to provide correct redirect URls and verify destination URLs during SAML processing.

Web SSO profile
We need beans for configuring WebSSO profile and logout. We use default spring saml provided implementation

WebSSOProfileConsumer Class is able to process Response objects returned from the IDP after SP initialized SSO or unsolicited response from IDP.

WebSSOProfile Class implements WebSSO profile and offers capabilities for SP initialized SSO and process Response coming from IDP or IDP initialized SSO. HTTP-POST and HTTP-Redirect bindings are supported.

// SAML 2.0 WebSSO Assertion Consumer
  @Bean
  public WebSSOProfileConsumer webSSOprofileConsumer() {
      return new WebSSOProfileConsumerImpl();
  }
 
  // SAML 2.0 Web SSO profile
  @Bean
  public WebSSOProfile webSSOprofile() {
      return new WebSSOProfileImpl();
  }
 
  @Bean
  public SingleLogoutProfile logoutprofile() {
      return new SingleLogoutProfileImpl();
  }
Spring security
Now let’s add some classic Spring Security configuration: – AuthenticationProvider. The authentication provider is capable of verifying the validity of a SAMLAuthenticationToken and in case the token is valid to create an authenticated UsernamePasswordAuthenticationToken.

AuthenticationProvider
@Bean
  public SAMLAuthenticationProvider samlAuthenticationProvider() {
      SAMLAuthenticationProvider samlAuthenticationProvider = new SAMLAuthenticationProvider();
      samlAuthenticationProvider.setForcePrincipalAsString(false);
      return samlAuthenticationProvider;
  }
 
 
  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
       auth
              .authenticationProvider(samlAuthenticationProvider());
  }
Http Security
Add the saml filter chain that has been built so far.
Permit certain URL patterns (/error, /saml/**). These patterns will not need authentication and will allow the users to access the resources without a need to login.

@Override 
protected void configure(HttpSecurity http) throws Exception {
 
    http
        .httpBasic()
            .authenticationEntryPoint(samlEntryPoint());
    http
          .addFilterBefore(metadataGeneratorFilter(), ChannelProcessingFilter.class)
          .addFilterAfter(samlFilter(), BasicAuthenticationFilter.class)
          .addFilterBefore(samlFilter(), CsrfFilter.class);
    http       
        .authorizeRequests()
              .antMatchers("/").permitAll()
              .antMatchers("/saml/**").permitAll()
              .antMatchers("/css/**").permitAll()
              .antMatchers("/img/**").permitAll()
              .antMatchers("/js/**").permitAll()
              .anyRequest().authenticated();
    http
          .logout()
             .disable();    // The logout procedure is already handled by SAML filters.
 
}
Other configurations
We initialize HTTPClient with multithreaded connection manager, initialize saml logger and more importantly SAML BootStrap which is responsible for the initialization of SAML library and is automatically called as part of Spring initialization.

@Bean
   public HttpClient httpClient() {
       return new HttpClient(multiThreadedHttpConnectionManager());
   }
  
   @Bean
   public MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager() {
       return new MultiThreadedHttpConnectionManager();
   }
  
   @Bean
   public static SAMLBootstrap SAMLBootstrap() {
       return new SAMLBootstrap();
   }
  
   @Bean
   public SAMLDefaultLogger samlLogger() {
       return new SAMLDefaultLogger();
   }
We have completed SAML configuration in Java and the web urls in the application now are authenticated through SAML.

Keystore File
We need to generate keystore.jks using the following command from your command prompt.Use “secret” when prompted for a keystore password. and"spring" when asked for alias

keytool -genkey -v -keystore keystore.jks -alias spring -keyalg RSA -keysize 2048 -validity 10000

Next generate .cert file using below command

keytool -v -export -file mytrustCA.cer -keystore keystore.jks -alias spring

Next give the below details in the update-certificate.sh file



IDP_HOST=https://dev-1329028.okta.com/app/dev-1329028_samlsample_1/exk11x8ab2yxTztAE5d6/sso/saml
IDP_PORT=443
CERTIFICATE_FILE=keystore.cert
KEYSTORE_FILE=keystore.jks
KEYSTORE_PASSWORD=secret
openssl s_client -host $IDP_HOST -port $IDP_PORT -prexit -showcerts </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > $CERTIFICATE_FILE
keytool -delete -alias spring -keystore $KEYSTORE_FILE -storepass $KEYSTORE_PASSWORD
keytool -import -alias spring -file $CERTIFICATE_FILE -keystore $KEYSTORE_FILE -storepass $KEYSTORE_PASSWORD -noprompt
 
rm $CERTIFICATE_FILE

All the set up is ready.
